# Smart Meter Monitoring Daemon (meterd)
# Sample configuration file
#
# This sample shows a typical setup for meterd; for more
# information, please refer to the documentation.

# Configuration for logging
logging:
{
	# Set the loglevel
	loglevel = 3; 	# 0 = no logging, 1 = error, 
			# 2 = warning, 3 = info, 4 = debug

	stdout = false;	# do not log to stdout
	syslog = false;	# log to syslog

	# Optionally, log to a file
	#filelog = "/var/log/meterd.log";
};

# Configure the behaviour of the daemon on startup
daemon:
{
	# Specify the PID file (optional, can also be specified on the
	# command line with the -p flag)
	pidfile = "/var/run/meterd.pid";

	# Prevent the daemon from forking (optional, can also be specified
	# on the command line with the -f flag)
	#fork = false;
};

# Smart meter configuration
meter:
{
	# Specify the serial port to which the smart meter is connected;
	# this is typically a USB to serial device:
	port = "/dev/ttyUSB0";

	# Specify the baud rate at which the meter outputs data
	speed = 115200;

	# Specify the number of data bits in the serial transmission;
	# valid values are 7 or 8
	bits = 8;

	# Specify the parity; valid values are "none", "odd" and "even"
	parity = "none";

	# Specify whether or not to use hardware flow control on the
	# serial line
	rts_cts = true;

	# Specify whether or not to use software flow control on the
	# serial line
	xon_xoff = false;

	# Specify the interval (in seconds) at which the smart meter outputs 
	# fresh readings; if the meter meets the DSMR criteria this is usually
	# 10 seconds.
	meter_interval = 10;
};

# Database configuration
database:
{
	# Specify the database file in which the raw measurements of actual
	# consumption are stored. If you do not specify a file, storage of
	# this data will be disabled.
	raw_db = "/var/meterd/raw.db";

	# Specify the database in which 5 minute average values of the
	# measured actual consumption is stored. If no file is specified
	# this data will be discarded.
	fivemin_avg = "/var/meterd/5min.db";

	# Specify the database in which hourly average values of the
	# measured actual consumption is stored. If no file is specified
	# this data will be discarded.
	hourly_avg = "/var/meterd/hourly.db";

	# Specify the identifier for current consumption (the value below
	# is the default value specified in the DSMR specification)
	current_consumption_id = "1.7.0";

	# Specify the identifier for current production (the value below
	# is the default value specified in the DSMR specification)
	current_production_id = "2.7.0";

	# Specify the database in which total consumption data will
	# be stored. If no file is specified this data will be discarded.
	total_consumed = "/var/meterd/consumed.db";

	# Specify the interval with which to log total consumption;
	# five minutes (example below) is a sensible interval that will
	# not generate huge amounts of data that will make disk space
	# run out quickly.
	total_interval = 300;

	# Specify which consumption counters to record; the example below
	# is for a meter that measures 2 tariffs (high/low). As the example
	# shows, you can specify more than one counter.
	consumption:
	{
		lowtariff:
		{
			# A short string to describe the counter; this 
			# information is used by the output and plotting
			# tools included in the distribution
			description = "Low In";

			# The identifier of the counter; consumption counters
			# are normally identified as 1.8.x (where x = [1..8])
			# according to the DSMR specification.
			id = "1.8.1";
		};

		hightariff:
		{
			description = "High In";

			id = "1.8.2";
		};
	};

	# Specify which production counters to record; the example below
	# is for a meter that measures 2 tariffs (high/low). As the example
	# shows, you can specify more than one counter.
	production:
	{
		lowtariff:
		{
			# A short string to describe the counter; this 
			# information is used by the output and plotting
			# tools included in the distribution
			description = "Low Out";

			# The identifier of the counter; production counters
			# are normally identified as 2.8.x (where x = [1..8])
			# according to the DSMR specification.
			id = "2.8.1";
		};

		hightariff:
		{
			description = "High Out";

			id = "2.8.2";
		};
	};

	# Specify the gas meter counter to record (only specify if your
	# smart meter also records gas consumption.
	gascounter:
	{
		description = "Gas";

		id = "24.2.1";
	};
};

# Specify periodic tasks to consume; this functionality of meterd is
# normally used to update graphs of the recorded data at regular
# intervals using the other tools supplied in the meterd distribution.
#
# For more information on the tools in the distribution, please refer
# to their respective manual pages or the documentation.
tasks:
{
	plotrawhour:
	{
		interval = 60;

		description = "Plot hour data for raw counters";

		cmd0 = "/usr/local/bin/meterd-output -q -c /etc/meterd.conf -s 1.7.0 -S 2.7.0 -p -d /var/meterd/raw.db -i 3600 -o /var/meterd/raw.hour -x -y 0.5 -r /var/meterd/raw.hour.ranges";
		cmd1 = "/usr/local/bin/plot-raw-hour.sh";
	};

	plotrawday:
	{
		interval = 300;

		description = "Plot one day of data for raw counters";

		cmd0 = "/usr/local/bin/meterd-output -q -c /etc/meterd.conf -s 1.7.0 -S 2.7.0 -p -d /var/meterd/raw.db -i 86400 -o /var/meterd/raw.day -x -y 0.5 -r /var/meterd/raw.day.ranges";
		cmd1 = "/usr/local/bin/plot-raw-day.sh";
	};

	plotrawweek:
	{
		interval = 3600;

		description = "Plot one week of data for raw counters based on 5 minute averages";

		cmd0 = "/usr/local/bin/meterd-output -q -c /etc/meterd.conf -s 1.7.0 -S 2.7.0 -p -d /var/meterd/5min.db -i 604800 -o /var/meterd/raw.week -x -y 0.5 -r /var/meterd/raw.week.ranges";
		cmd1 = "/usr/local/bin/plot-raw-week.sh";
	};

	plottotalday:
	{
		interval = 300;

		description = "Plot one day of total added up consumption/production";

		cmd0 = "/usr/local/bin/meterd-output -q -c /etc/meterd.conf -s 1.8.1 -s 1.8.2 -S 2.8.1 -S 2.8.2 -a -p -d /var/meterd/consumed.db -i 86400 -o /var/meterd/consumed.day -x -y 0.5 -r /var/meterd/consumed.day.ranges";
		cmd1 = "/usr/local/bin/plot-consumed-day.sh";
	};

	plottotalweek:
	{
		interval = 3600;

		description = "Plot one week of total added up consumption/production";

		cmd0 = "/usr/local/bin/meterd-output -q -c /etc/meterd.conf -s 1.8.1 -s 1.8.2 -S 2.8.1 -S 2.8.2 -a -p -d /var/meterd/consumed.db -i 604800 -o /var/meterd/consumed.week -x -y 0.5 -r /var/meterd/consumed.week.ranges";
		cmd1 = "/usr/local/bin/plot-consumed-week.sh";
	};

	plotgasday:
	{
		interval = 1800;

		description = "Plot one day of gas consumption";

		cmd0 = "/usr/local/bin/meterd-output -q -c /etc/meterd.conf -s 24.2.1 -p -d /var/meterd/consumed.db -i 86400 -o /var/meterd/gas.day -x -y 0.5 -r /var/meterd/gas.day.ranges";
		cmd1 = "/usr/local/bin/plot-gas-day.sh";
	};

	plotgasweek:
	{
		interval = 3600;

		description = "Plot one week of gas consumption";

		cmd0 = "/usr/local/bin/meterd-output -q -c /etc/meterd.conf -s 24.2.1 -p -d /var/meterd/consumed.db -i 604800 -o /var/meterd/gas.week -x -y 0.5 -r /var/meterd/gas.week.ranges";
		cmd1 = "/usr/local/bin/plot-gas-week.sh";
	};

	stattotal:
	{
		interval = 600;

		description = "Statistics on total added up consumption/production";

		cmd0 = "meterd-output -c /etc/meterd.conf -s 1.8.1 -s 1.8.2 -S 2.8.1 -S 2.8.2 -d /var/meterd/consumed.db -i 31536000 -p -a | awk '{ $1 = strftime(\"%Y-%m-%d\", $1); print $1, $2 }' | gawk 'BEGIN { min = 1; max = 2; } { if ($1 in a) { if ($2 < a[$1][min]) { a[$1][min] = $2; } if ($2 > a[$1][max]) { a[$1][max] = $2; } } else { a[$1][min] = $2; a[$1][max] = $2; } } END { for (day in a) print day, a[day][max] - a[day][min]; }' | sort -nr > /tmp/meterd-consumed.stat";
		cmd1 = "mv /tmp/meterd-consumed.stat /var/www/html/txt/consumed.stat"
	};

	statgas:
	{
		interval = 3600;

		description = "Statistics on total added up gas consumption";

		cmd0 = "meterd-output -c /etc/meterd.conf -s 24.2.1 -d /var/meterd/consumed.db -i 31536000 -p | awk '{ $1 = strftime(\"%Y-%m-%d\", $1); print }' | gawk 'BEGIN { min = 1; max = 2; } { if ($1 in a) { if ($2 < a[$1][min]) { a[$1][min] = $2; } if ($2 > a[$1][max]) { a[$1][max] = $2; } } else { a[$1][min] = $2; a[$1][max] = $2; }} END { for (day in a) print day, a[day][max] - a[day][min]; }' | sort -nr > /tmp/meterd-gas.stat";
		cmd1 = "mv /tmp/meterd-gas.stat /var/www/html/txt/gas.stat";
	};
};
